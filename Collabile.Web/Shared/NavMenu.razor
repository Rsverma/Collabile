@using System.Security.Claims

<UserCard />
<MudNavMenu>
    <MudListSubheader Class="mt-2 mb-n2">Home</MudListSubheader>
    @if (_canViewHangfire)
    {
        <MudNavLink Href="/jobs" Target="_blank" Icon="@Icons.Material.Outlined.Work">
            Hangfire
        </MudNavLink>
    }
    <MudNavLink Href="/home" Icon="@Icons.Material.Outlined.Dashboard">
        Dashboard
    </MudNavLink>
    <MudNavLink Href="/projects" Icon="@Icons.Material.Outlined.Workspaces">
        Projects
    </MudNavLink>
    <MudNavLink Href="/teams" Icon="@Icons.Material.Outlined.Groups">
        My Teams
    </MudNavLink>
    <MudNavLink Href="/workitems" Icon="@Icons.Material.Outlined.Task">
        Work Items
    </MudNavLink>
    <MudNavLink Href="/history" Icon="@Icons.Material.Outlined.History">
        History
    </MudNavLink>
    

    @if (_isAdmin)
    {
        <MudListSubheader Class="mt-2 mb-n2">Administrator</MudListSubheader>
        <MudNavLink Href="/admin/users" Icon="@Icons.Material.Outlined.ManageAccounts">
            Manage Users
        </MudNavLink>
        <MudNavLink Href="/admin/projects" Icon="@Icons.Material.Outlined.EditRoad">
            Manage Projects
        </MudNavLink>
        <MudNavLink Href="/admin/teams" Icon="@Icons.Material.Outlined.People">
            Manage Teams
        </MudNavLink>
    }

     <MudListSubheader Class="mt-2 mb-n2">About</MudListSubheader>
         <MudNavLink Href="https://codewithrsv.com" Target="_blank" Icon="@Icons.Material.Outlined.ReadMore">
            Quick Start Guide
        </MudNavLink>
        <MudNavLink Href="/swagger/index.html" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp">
           Swagger
        </MudNavLink>
        <MudNavLink Href="/aboutus" Icon="@Icons.Outlined.Info">
            About Us
        </MudNavLink>
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire = false;
    private bool _isAdmin = true;

    protected override async Task OnParametersSetAsync()
    {
        await Task.CompletedTask;   
        //_authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        //_canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        //_canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        //_canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        //_canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        //_canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        //_canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        //_canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        //_canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
        //_canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        //_canViewBrands = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Brands.View)).Succeeded;
    }
}