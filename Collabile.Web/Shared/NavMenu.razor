@using System.Security.Claims

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Home</MudNavLink>
    @if (_canViewHangfire)
    {
        <MudNavLink Href="/jobs" Target="_blank" Icon="@Icons.Material.Outlined.Work">
            Hangfire
        </MudNavLink>
    }
    <MudNavLink Href="https://codewithmukesh.com/blog/blazor-hero-quick-start-guide/" Target="_blank" Icon="@Icons.Material.Outlined.ReadMore">
        Quick Start Guide
    </MudNavLink>
    <MudNavLink Href="/swagger/index.html" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp">
       Swagger
    </MudNavLink>
    <MudListSubheader Class="mt-2 mb-n2">Personal</MudListSubheader>
    @if (_canViewDashboards)
    {
        <MudNavLink Href="/dashboard" Icon="@Icons.Material.Outlined.Dashboard">
            Dashboard
        </MudNavLink>
    }
    <MudNavLink Href="/account" Icon="@Icons.Material.Outlined.SupervisorAccount">
        Account
    </MudNavLink>
    @if (_canViewAuditTrails)
    {
        <MudNavLink Href="/audit-trails" Icon="@Icons.Material.Outlined.Security">
            Audit Trails
        </MudNavLink>
    }
    @if (_canViewDocuments || _canViewDocumentTypes)
    {
        <MudListSubheader Class="mt-2 mb-n2">Document Management</MudListSubheader>
        @if (_canViewDocuments)
        {
            <MudNavLink Href="/document-store" Icon="@Icons.Material.Outlined.AttachFile">
                Document Store
            </MudNavLink>
        }
        @if (_canViewDocumentTypes)
        {
            <MudNavLink Href="/document-types" Icon="@Icons.Material.Outlined.FileCopy">
                Document Types
            </MudNavLink>
        }
    }

    @if (_canViewUsers || _canViewRoles)
    {
        <MudListSubheader Class="mt-2 mb-n2">Administrator</MudListSubheader>
        @if (_canViewUsers)
        {
            <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Person">
                Users
            </MudNavLink>
        }
        @if (_canViewRoles)
        {
            <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.Person">Roles</MudNavLink>
        }
    }
    @if (_canViewChat)
    {
        <MudListSubheader Class="mt-2 mb-n2">Communication</MudListSubheader>
        <MudNavLink Href="/chat" Icon="@Icons.Material.Outlined.Chat">
            Chat
        </MudNavLink>
    }
    @if (_canViewProducts || _canViewBrands)
    {
        <MudListSubheader Class="mt-2 mb-n2">Catalog Management</MudListSubheader>
        @if (_canViewProducts)
        {
            <MudNavLink Href="/catalog/products" Icon="@Icons.Material.Outlined.CallToAction">
                Products
            </MudNavLink>
        }
        @if (_canViewBrands)
        {
            <MudNavLink Href="/catalog/brands" Icon="@Icons.Material.Outlined.CallToAction">
                Brands
            </MudNavLink>
        }
    }
     <MudListSubheader Class="mt-2 mb-n2">About</MudListSubheader>
        <MudNavLink Href="/aboutus" Icon="@Icons.Outlined.Info">
            About Us
        </MudNavLink>
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire = true;
    private bool _canViewDashboards= true;
    private bool _canViewDocuments= true;
    private bool _canViewDocumentTypes= true;
    private bool _canViewAuditTrails= true;
    private bool _canViewRoles= true;
    private bool _canViewUsers= true;
    private bool _canViewChat= true;
    private bool _canViewProducts= true;
    private bool _canViewBrands= true;

    protected override async Task OnParametersSetAsync()
    {
        await Task.CompletedTask;   
        //_authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        //_canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        //_canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        //_canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        //_canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        //_canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        //_canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        //_canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        //_canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
        //_canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        //_canViewBrands = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Brands.View)).Succeeded;
    }
}